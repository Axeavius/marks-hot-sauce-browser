{"version":3,"sources":["HotSauce/HotSauceCard.js","HotSauce/HotSauceList.js","App.js","serviceWorker.js","index.js"],"names":["HotSauceCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCardClicked","bind","assertThisInitialized","onDeleteItem","event","preventDefault","dataCallback","title","hotSauce","desc","description","imageURL","stopPropagation","deleteItem","id","_this2","react_default","a","createElement","className","onClick","src","alt","i","subtitle","Component","HotSauceList","hotSauces","HotSauceData","list","map","hotSauceItem","index","state","hotSauceList","showHotSauceDetail","detailTitle","detailDesc","detailImageURL","hotSauceDetailCallback","backToHotSauceList","hotSauceDetail","setState","prevState","filter","item","type","src_HotSauce_HotSauceCard","key","concat","App","src_HotSauce_HotSauceList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0sNA8CeA,iCA1Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,cAAgBP,EAAKO,cAAcC,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACrBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHHA,6EAMLW,GACZA,EAAMC,kBAGNC,EAFuBV,KAAKJ,MAArBc,cAEM,CACXC,MAAOX,KAAKJ,MAAMgB,SAASD,MAC3BE,KAAMb,KAAKJ,MAAMgB,SAASE,YAC1BC,SAAUf,KAAKJ,MAAMgB,SAASG,gDAIrBP,GACXA,EAAMC,iBAGND,EAAMQ,kBAENhB,KAAKJ,MAAMqB,WAAWjB,KAAKJ,MAAMgB,SAASM,qCAGnC,IAAAC,EAAAnB,KACAY,EAAYZ,KAAKJ,MAAjBgB,SAEP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASxB,KAAKI,eAClCgB,EAAAC,EAAAC,cAAA,OAAKG,IAAKb,EAASG,SAAUW,IAAKd,EAASD,QAC3CS,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,QAAS,SAACG,GAAD,OAAOR,EAAKZ,aAAaoB,KAAjE,KACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQX,EAASD,OACjCS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQX,EAASgB,mBApChBC,cC4FZC,cAtFb,SAAAA,EAAYlC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,GACjBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,IAEN,IAAMmC,EAAYC,EAAaC,KAAKC,IAAI,SAACC,EAAcC,GACrD,OAAOD,IAJQ,OAOjBtC,EAAKwC,MAAQ,CACXC,aAAcP,EACdQ,oBAAoB,EACpBC,YAAa,GACbC,WAAY,GACZC,eAAgB,IAGlB7C,EAAK8C,uBAAyB9C,EAAK8C,uBAAuBtC,KAA5BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC9BA,EAAK+C,mBAAqB/C,EAAK+C,mBAAmBvC,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC1BA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAjBHA,sFAoBIgD,GACrB7C,KAAK8C,SAAS,CACZP,oBAAoB,EACpBC,YAAaK,EAAelC,MAC5B8B,WAAYI,EAAehC,KAC3B6B,eAAgBG,EAAe9B,sDAIhBP,GACjBR,KAAK8C,SAAS,CACZP,oBAAoB,yCAIXrB,GACXlB,KAAK8C,SAAS,SAAAC,GAAS,MAAK,CAC1BT,aAAcS,EAAUT,aAAaU,OAAO,SAAAC,GAAI,OAAIA,EAAK/B,KAAOA,wCAI3D,IAAAC,EAAAnB,KAGP,OAA2B,IAFEA,KAAKqC,MAA3BE,mBAIHnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQ4B,KAAK,SAAS1B,QAASxB,KAAK4C,oBAApC,6BAEFxB,EAAAC,EAAAC,cAAA,UAAKtB,KAAKqC,MAAMG,cAElBpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKzB,KAAKqC,MAAMK,eAAgBhB,IAAK1B,KAAKqC,MAAMG,gBAGzDpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAItB,KAAKqC,MAAMI,cAOnBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,WACGtB,KAAKqC,MAAMC,aAAaJ,IAAI,SAACC,EAAcC,GAC1C,OACEhB,EAAAC,EAAAC,cAAC6B,EAAD,CACEvC,SAAUuB,EACViB,IAAG,iBAAAC,OAAmBjB,GACtB1B,aAAcS,EAAKwB,uBACnB1B,WAAYE,EAAKZ,aAAaF,KAAKc,gBA5E1BU,aCMZyB,mLARX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,cAJU1B,mBCQE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6eef6b2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './HotSauceCard.css';\r\n\r\nclass HotSauceCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onCardClicked = this.onCardClicked.bind(this);\r\n    this.onDeleteItem = this.onDeleteItem.bind(this);\r\n  }  \r\n\r\n  onCardClicked(event) {\r\n    event.preventDefault();\r\n    const {dataCallback} = this.props;\r\n\r\n    dataCallback({\r\n      title: this.props.hotSauce.title,\r\n      desc: this.props.hotSauce.description,\r\n      imageURL: this.props.hotSauce.imageURL\r\n    });\r\n  };\r\n\r\n  onDeleteItem(event) {\r\n    event.preventDefault();\r\n\r\n    // Prevent the parent from being clicked\r\n    event.stopPropagation();\r\n\r\n    this.props.deleteItem(this.props.hotSauce.id);\r\n  }\r\n  \r\n  render() {\r\n    const {hotSauce} = this.props;\r\n\r\n    return (\r\n      <div className=\"card\" onClick={this.onCardClicked}>\r\n        <img src={hotSauce.imageURL} alt={hotSauce.title} />\r\n        <button className=\"delete-btn\" onClick={(i) => this.onDeleteItem(i)}>+</button>\r\n        <div className=\"info-section\">\r\n          <span className=\"name\">{hotSauce.title}</span>\r\n          <span className=\"desc\">{hotSauce.subtitle}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HotSauceCard;\r\n","import React, { Component } from 'react';\r\nimport HotSauceData from '../hotsauces.json';\r\nimport './HotSauceList.css';\r\n\r\nimport './HotSauceDetail.css';\r\n\r\nimport HotSauceCard from './HotSauceCard';\r\n\r\nclass HotSauceList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const hotSauces = HotSauceData.list.map((hotSauceItem, index) => {\r\n      return hotSauceItem;\r\n    })\r\n\r\n    this.state = {\r\n      hotSauceList: hotSauces,\r\n      showHotSauceDetail: false,\r\n      detailTitle: \"\",\r\n      detailDesc: \"\",\r\n      detailImageURL: \"\"\r\n    };\r\n\r\n    this.hotSauceDetailCallback = this.hotSauceDetailCallback.bind(this);\r\n    this.backToHotSauceList = this.backToHotSauceList.bind(this);\r\n    this.onDeleteItem = this.onDeleteItem.bind(this);\r\n  }\r\n\r\n  hotSauceDetailCallback(hotSauceDetail) {\r\n    this.setState({\r\n      showHotSauceDetail: true,\r\n      detailTitle: hotSauceDetail.title,\r\n      detailDesc: hotSauceDetail.desc,\r\n      detailImageURL: hotSauceDetail.imageURL\r\n    });\r\n  }\r\n\r\n  backToHotSauceList(event) {\r\n    this.setState({\r\n      showHotSauceDetail: false\r\n    });\r\n  }\r\n\r\n  onDeleteItem(id) {\r\n    this.setState(prevState => ({\r\n      hotSauceList: prevState.hotSauceList.filter(item => item.id !== id )\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const {showHotSauceDetail} = this.state;\r\n\r\n    if (showHotSauceDetail === true) {\r\n      return (\r\n        <div className=\"hot-sauce-detail\">\r\n          <div className=\"left\">\r\n            <div className=\"header\">\r\n              <h3>\r\n                <button type=\"button\" onClick={this.backToHotSauceList}>&lt; Back to Hot Sauce List</button>\r\n              </h3>\r\n              <h1>{this.state.detailTitle}</h1>\r\n            </div>\r\n            <div className=\"img-wrapper\">\r\n              <img src={this.state.detailImageURL} alt={this.state.detailTitle} />\r\n            </div>\r\n          </div>\r\n          <div className=\"right\">\r\n            <p>{this.state.detailDesc}</p>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"hot-sauce-grid\">\r\n          <h2>Mark's Hot Sauce Browser</h2>\r\n          <div>\r\n            {this.state.hotSauceList.map((hotSauceItem, index) => {\r\n              return (\r\n                <HotSauceCard \r\n                  hotSauce={hotSauceItem} \r\n                  key={`hot-sauce-key ${index}`}\r\n                  dataCallback={this.hotSauceDetailCallback}\r\n                  deleteItem={this.onDeleteItem.bind(this)} \r\n                />\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default HotSauceList;\r\n","import React, { Component } from 'react';\n\nimport HotSauceList from './HotSauce/HotSauceList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HotSauceList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}